import asyncio
import sys
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.exceptions import VkApiError
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from config import VK_TOKEN, TELEGRAM_TOKEN, GROUP_ID, GIFT_TYPE
from handlers import get_handlers
import threading
import time
import logging
from database import Database
db = Database()


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(threadName)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

vk_bot_instance = None

class VKBot:
    def __init__(self):
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VKBot...")
        self.vk_session = vk_api.VkApi(token=VK_TOKEN)
        self.vk = self.vk_session.get_api()
        self._running = False
        logger.info("VKBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def run(self):
        self._running = True
        logger.info("VK –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        longpoll = None

        try:
            longpoll = VkBotLongPoll(self.vk_session, GROUP_ID)
            logger.info("VK –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")

            while self._running:
                try:
                    events = longpoll.check()
                    for event in events:
                        logger.debug(f"VK_Bot: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.type}, –¥–∞–Ω–Ω—ã–µ: {event.object}")
                        self._handle_event(event)
                except VkApiError as e:
                    logger.error(f"VK_Bot: –û—à–∏–±–∫–∞ API VK: {e}")
                    if self._running:
                        time.sleep(15)
                except Exception as e:
                    logger.error(f"VK_Bot: –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π VK: {e}", exc_info=True)
                    if self._running:
                        time.sleep(5)
            logger.info("VK_Bot: –¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω (—Ñ–ª–∞–≥ _running —Å—Ç–∞–ª False).")

        except Exception as e:
            logger.error(f"VK_Bot: –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ VK –±–æ—Ç–∞: {e}", exc_info=True)
        finally:
            logger.info("VK_Bot: VK –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def _handle_event(self, event):
        try:
            user_id = None
            action_type = None

            # –õ–∞–π–∫
            if event.type == 'like_add':
                if event.object.get('object_type') == 'post':
                    user_id = event.object.get('liker_id')
                    post_id = event.object.get('object_id')
                    action_type = f"–ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç {post_id}"

            # –†–µ–ø–æ—Å—Ç
            elif event.type == VkBotEventType.WALL_POST_NEW:
                if event.object.get('copy_history'):
                    user_id = event.object.get('from_id') or event.object.get('signer_id')
                    original = event.object['copy_history'][0]
                    action_type = f"—Ä–µ–ø–æ—Å—Ç –ø–æ—Å—Ç–∞ {original.get('owner_id')}_{original.get('id')}"

            if user_id and action_type:
                logger.info(f"VK_Bot: {action_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                db.log_vk_action(user_id, action_type)
                self._send_invite(user_id, action_type)
            else:
                logger.debug(f"VK_Bot: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event.type}")

        except Exception as e:
            logger.error(f"VK_Bot: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)

    def _send_invite(self, user_id, action_type):
        try:
            text = (
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ {action_type}! üéÅ\n"
                f"–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –≤ Telegram ‚Üí t.me/Denigo_test_bot"
            )
            self.vk.messages.send(
                user_id=user_id,
                message=text,
                random_id=int(time.time() * 1000) + user_id
            )
            logger.info(f"VK_Bot: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.warning(f"VK_Bot: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    def stop(self):
        logger.info("VK_Bot: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É VK –±–æ—Ç–∞...")
        self._running = False


class TelegramBot:
    def __init__(self):
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramBot...")
        if GIFT_TYPE != "promo_code": 
            logger.warning(
                f"TelegramBot: GIFT_TYPE –≤ config.py ('{GIFT_TYPE}') –Ω–µ —Ä–∞–≤–µ–Ω 'promo_code'. "
                f"–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π –ø–æ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ handlers.py, –µ—Å–ª–∏ –æ–Ω–∞ –æ–∂–∏–¥–∞–µ—Ç 'promo_code'."
            )

        self.application = Application.builder().token(TELEGRAM_TOKEN).build()
        self.application.add_handler(get_handlers())
        logger.info("TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


def run_vk_bot_threaded():
    global vk_bot_instance
    vk_bot_instance = VKBot() 
    logger.info("VK_Bot_Thread: –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è VK –±–æ—Ç–∞.")
    try:
        if vk_bot_instance:
            vk_bot_instance.run()
    except Exception as e:
        logger.error(f"VK_Bot_Thread: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–∫–µ VK –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("VK_Bot_Thread: –ü–æ—Ç–æ–∫ –¥–ª—è VK –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.")


async def main_async_entrypoint():
    logger.info("Async_Main: üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")

    vk_thread = threading.Thread(target=run_vk_bot_threaded, name="VKBotThread", daemon=True)
    tg_bot = TelegramBot()
    application = tg_bot.application

    vk_thread.start() 
    logger.info("Async_Main: –ü–æ—Ç–æ–∫ VK –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω.")

    try:
        logger.info("Async_Main: Telegram_Bot: –ó–∞–ø—É—Å–∫ polling...")
        await application.run_polling()
        logger.info("Async_Main: Telegram_Bot: Polling –∑–∞–≤–µ—Ä—à–µ–Ω (–æ–±—ã—á–Ω–æ –ø—Ä–∏ —à—Ç–∞—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ).")

    except (KeyboardInterrupt, asyncio.CancelledError) as e:
        logger.info(f"Async_Main: Telegram_Bot: Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({type(e).__name__}).")
    except Exception as e:
        logger.error(f"Async_Main: ‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ Telegram –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("Async_Main: –í—Ö–æ–¥ –≤ –±–ª–æ–∫ finally –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.")

        if application:
            logger.info("Async_Main: –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram...")
            try:
                await application.shutdown()
                logger.info("Async_Main: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            except RuntimeError as e_runtime:
                 logger.error(f"Async_Main: RuntimeError –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram: {e_runtime}", exc_info=False)
            except Exception as e_shutdown:
                logger.error(f"Async_Main: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram: {e_shutdown}", exc_info=True)

        global vk_bot_instance
        if vk_bot_instance:
            logger.info("Async_Main: –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VK –±–æ—Ç–∞...")
            vk_bot_instance.stop()
        else:
            logger.warning("Async_Main: –≠–∫–∑–µ–º–ø–ª—è—Ä VK –±–æ—Ç–∞ –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")

        if vk_thread and vk_thread.is_alive():
            logger.info("Async_Main: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ VK –±–æ—Ç–∞ (–¥–æ 10 —Å–µ–∫—É–Ω–¥)...")
            vk_thread.join(timeout=10)
            if vk_thread.is_alive():
                logger.warning("Async_Main: –ü–æ—Ç–æ–∫ VK –±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥.")
            else:
                logger.info("Async_Main: –ü–æ—Ç–æ–∫ VK –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        elif vk_thread:
             logger.info("Async_Main: –ü–æ—Ç–æ–∫ VK –±–æ—Ç–∞ —É–∂–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")
        logger.info("Async_Main: ‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

import sys

if __name__ == "__main__":
    import sys
    import asyncio

    if sys.platform.startswith("win"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    logger.info("MAIN_APP_ENTRY: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        
        vk_thread = threading.Thread(target=run_vk_bot_threaded, name="VKBotThread", daemon=True)
        vk_thread.start()
        logger.info("MAIN_APP_ENTRY: –ü–æ—Ç–æ–∫ VK –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω.")

        tg_bot = TelegramBot()
        tg_bot.application.run_polling()  

    except KeyboardInterrupt:
        logger.info("MAIN_APP_ENTRY: üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.error(f"MAIN_APP_ENTRY: ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)