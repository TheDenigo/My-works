from telegram import Update
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)
from database import Database

db = Database()

ASK_NAME, ASK_EMAIL, ASK_PHONE = range(3)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    if db.check_user(user_id):
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ")
        return ConversationHandler.END
    else:
        context.user_data["user_id"] = user_id
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è üòä")
        return ASK_NAME


async def ask_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –ø–æ—á—Ç—É üìß")
    return ASK_EMAIL


async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["email"] = update.message.text
    await update.message.reply_text("–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±")
    return ASK_PHONE


async def save_and_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["phone"] = update.message.text

    user_id = context.user_data["user_id"]
    name = context.user_data["name"]
    email = context.user_data["email"]
    phone = context.user_data["phone"]

    db.add_user(user_id, name, email, phone)

    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, {name}! üéâ –í–æ—Ç –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: *PROMO123*", parse_mode="Markdown")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start üôÇ")
    return ConversationHandler.END


def get_handlers():
    return ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_email)],
            ASK_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_and_finish)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
