import asyncio
import sys
import threading
import time
import logging
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.exceptions import VkApiError
from telegram.ext import Application
from config import VK_TOKEN, TELEGRAM_TOKEN, GROUP_ID
from handlers import get_handlers
from database import Database

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(threadName)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("main")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = Database()
vk_bot_instance = None
vk_thread = None
tg_bot = None
tg_thread = None
tg_loop = None


class VKBot:
    def __init__(self):
        logger.info("VKBot: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è‚Ä¶")
        self.vk_session = vk_api.VkApi(token=VK_TOKEN)
        self.vk = self.vk_session.get_api()
        self._running = False
        logger.info("VKBot: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def run(self):
        self._running = True
        logger.info("VKBot: Long Poll —Å—Ç–∞—Ä—Ç‚Ä¶")
        try:
            longpoll = VkBotLongPoll(self.vk_session, GROUP_ID)
        except Exception as e:
            logger.error(f"VKBot: LongPoll –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            return

        while self._running:
            try:
                for event in longpoll.check():
                    self._handle_event(event)
            except Exception as e:
                logger.warning(f"VKBot: –æ—à–∏–±–∫–∞: {e}", exc_info=True)
                time.sleep(5)

        logger.info("VKBot: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def _handle_event(self, event):
        try:
            user_id = None
            action = None

            if event.type == "like_add" and event.object.get("object_type") == "post":
                user_id = event.object.get("liker_id")
                post_id = event.object.get("object_id")
                action = f"–ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç {post_id}"

            elif event.type == VkBotEventType.WALL_POST_NEW:
                if event.object.get("copy_history"):
                    user_id = event.object.get("from_id") or event.object.get("signer_id")
                    original = event.object["copy_history"][0]
                    action = f"—Ä–µ–ø–æ—Å—Ç –ø–æ—Å—Ç–∞ {original.get('owner_id')}_{original.get('id')}"

            if user_id and action:
                if db.was_user_invited(user_id):
                    logger.info(f"VKBot: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∞–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return
                db.log_vk_action(user_id, action)
                self._send_invite(user_id, action)
                db.mark_user_invited(user_id)
            else:
                logger.debug(f"VKBot: –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event.type}")
        except Exception as e:
            logger.error(f"VKBot: –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)

    def _send_invite(self, user_id, action_type):
        try:
            text = (
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ {action_type}! üéÅ\n"
                f"–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –≤ Telegram ‚Üí https://t.me/–í–∞—à_Telegram_–ë–æ—Ç"
            )
            self.vk.messages.send(
                user_id=user_id,
                message=text,
                random_id=int(time.time() * 1000) + user_id
            )
            logger.info(f"VKBot: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
        except Exception as e:
            logger.warning(f"VKBot: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")

    def stop(self):
        logger.info("VKBot: –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        self._running = False


class TelegramBot:
    def __init__(self):
        logger.info("TelegramBot: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è‚Ä¶")
        self.app = Application.builder().token(TELEGRAM_TOKEN).build()
        self.app.add_handler(get_handlers())
        self.loop = None
        self.running = False

    def start(self):
        logger.info("TelegramBot: –∑–∞–ø—É—Å–∫–∞–µ–º polling‚Ä¶")
        if sys.platform.startswith("win"):
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        self.running = True
        self.loop.run_until_complete(self.app.initialize())
        self.loop.run_until_complete(self.app.start())
        self.loop.run_until_complete(self.app.updater.start_polling())
        self.loop.run_forever()

    def stop(self):
        if not self.running:
            return
        logger.info("TelegramBot: –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        if self.loop and self.loop.is_running():
            self.loop.call_soon_threadsafe(self._shutdown)

    def _shutdown(self):
        async def _close():
            await self.app.updater.stop()
            await self.app.stop()
            await self.app.shutdown()
            self.loop.stop()
            self.running = False
            logger.info("TelegramBot: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        asyncio.create_task(_close())


def start_bot():
    global vk_bot_instance, vk_thread, tg_bot, tg_thread

    # VKBot
    vk_bot_instance = VKBot()
    vk_thread = threading.Thread(target=vk_bot_instance.run, name="VKBotThread", daemon=True)
    vk_thread.start()
    logger.info("MAIN_APP: VKBot –∑–∞–ø—É—â–µ–Ω")

    # TelegramBot
    tg_bot = TelegramBot()
    tg_thread = threading.Thread(target=tg_bot.start, name="TelegramBotThread", daemon=True)
    tg_thread.start()
    logger.info("MAIN_APP: TelegramBot –∑–∞–ø—É—â–µ–Ω")


def stop_bot():
    global tg_bot, vk_bot_instance
    logger.info("MAIN_APP: –ø–æ—Å—ã–ª–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ–∏–º –±–æ—Ç–∞–º‚Ä¶")

    if tg_bot:
        tg_bot.stop()
    if vk_bot_instance:
        vk_bot_instance.stop()

    logger.info("MAIN_APP: –æ–±–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
